import React, { useEffect, useState } from "react";
import WaveSurfer from "wavesurfer.js";
import MicrophonePlugin from "wavesurfer.js/dist/plugins/record";

const AudioRecorder = () => {
  const [isRecording, setIsRecording] = useState(false);
  const [isPlaying, setIsPlaying] = useState(false);
  const [waveform, setWaveform] = useState(null);

  const startRecording = async () => {
    try {
      if (waveform) {
        waveform.microphone.start();
        setIsRecording(true);
      }
    } catch (error) {
      console.error("Erro ao iniciar a gravação:", error);
    }
  };

  const stopRecording = () => {
    try {
      if (waveform) {
        waveform.microphone.stop();
        setIsRecording(false);
      }
    } catch (error) {
      console.error("Erro ao parar a gravação:", error);
    }
  };

  const playRecording = () => {
    if (waveform) {
      waveform.play();
      setIsPlaying(true);
    }
  };

  const initializeWaveform = () => {
    const wavesurfer = WaveSurfer.create({
      container: "#waveform",
      waveColor: "blue",
      progressColor: "purple",
      barWidth: 1, // Aumente o valor do barWidth para barras mais espessas
      barHeight: 2, // Defina a altura das barras
      barGap: 2, // Defina o espaçamento entre as barras
      barRadius: 2, // Defina o raio das barras
      plugins: [
        MicrophonePlugin.create({
          container: "#mic",
          visualSetting: "frequencyBars", // Use "frequencyBars" para barras em tempo real
          barWidth: 1, // Ajuste essas configurações para combinar com o visual do waveform
          barHeight: 2,
          barGap: 2,
          barRadius: 2,
          fftSamples: 128 // O número de amostras FFT determina a sensibilidade
        })
      ]
    });

    setWaveform(wavesurfer);
  };

  useEffect(() => {
    initializeWaveform();
  }, []);

  return (
    <div className="audio-recorder-container">
      <div className={`recording-indicator ${isRecording ? "recording" : ""}`}>
        {isRecording ? "Gravando..." : "Não está gravando"}
      </div>
      <button
        className={`record-button ${isRecording ? "recording" : ""}`}
        onClick={isRecording ? stopRecording : startRecording}
      >
        {isRecording ? "Parar" : "Iniciar Gravação"}
      </button>
      <button
        className="play-button"
        onClick={playRecording}
        disabled={!waveform || isRecording || isPlaying}
      >
        Reproduzir Gravação
      </button>
      <div id="waveform"></div>
      <div id="mic"></div>
    </div>
  );
};

export default AudioRecorder;
